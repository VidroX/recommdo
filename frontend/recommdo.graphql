# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: ApiQuery
    mutation: ApiMutation
}

"An object with an ID"
interface Node {
    "The ID of the object."
    id: ID!
}

type AccessLevelModel {
    description: String!
    isStaff: Boolean!
    level: Int!
    name: String!
}

type ApiMutation {
    createProject(files: [Upload]!, projectMetadata: ProjectMetadataInput!, projectName: String!): CreateProject
    login(email: String!, password: String!): Login
    refresh: Refresh
    register(accessLevel: Int = 1, email: String!, firstName: String!, lastName: String!, middleName: String = "", password: String!): Register
}

type ApiQuery {
    "The ID of the object"
    node(id: ID!): Node
    project(projectId: String!): ProjectModel
    projectPurchases(orderBy: String, page: Int = 1, projectId: String!, search: Float): PurchasesPaginationModel
    projects: [ProjectModel]
    user: UserModel
    userPurchases(projectId: String!, userId: Int!): [PurchaseModel]
    users: [UserModel]
}

type CreateProject {
    project: ProjectModel
}

type FileLocationModel {
    id: ID!
    location: String!
    name: String!
}

type Login {
    tokens: TokenData
    user: UserModel
}

type MetadataModel {
    id: ID!
    metaId: Int!
    name: String
}

type ProjectModel {
    allowedUsers: [UserModel]!
    analyzed: Boolean!
    files: [FileLocationModel]!
    id: ID!
    imported: Boolean!
    name: String!
}

type PurchaseModel {
    id: ID!
    metadata: MetadataModel!
    project: ProjectModel!
    userId: Int!
    weight: Int
}

type PurchasesPaginationModel {
    currentPage: Int
    pageAmount: Int
    purchases: [PurchaseModel]!
    shownEntries: Int
    totalEntries: Int
}

type Refresh {
    tokens: TokenData
}

type Register {
    tokens: TokenData
    user: UserModel
}

type TokenData {
    accessToken: String
    refreshToken: String
}

type UserModel {
    accessLevel: AccessLevelModel!
    email: String!
    firstName: String!
    id: ID!
    lastName: String!
    middleName: String
}

input ProjectMetadataInput {
    metaFileName: String!
    metaIdHeader: String!
    metaNameHeader: String
    subscriptionsEndAtHeader: String!
    subscriptionsFileName: String!
    subscriptionsMetaIdHeader: String!
    subscriptionsStartFromHeader: String!
    subscriptionsUserIdHeader: String!
}


"""
Create scalar that ignores normal serialization/deserialization, since
that will be handled by the multipart request spec
"""
scalar Upload